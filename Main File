--[[ Originally made by Purble_Dev
Discord: @purbledev
Date: 20.06.2025
Enjoy!

QUICK HEADS UP:
This script is for taking care of enemies with your bow,
you can see how the script works in this game:
https://www.roblox.com/games/72409643525900/Idle-gamer
]]--

local handler = require(game.ServerScriptService.Handler)
local upgrades = handler.upgradesList

local tool = script.Parent
local fireRate = tool:WaitForChild("FireRate")
local range = tool:WaitForChild("Range")
local damage = tool:WaitForChild("Damage")
local projectileSpeed = tool:WaitForChild("ProjectileSpeed")
local projectiles = tool:WaitForChild("Projectiles")
local critChance = tool:WaitForChild("CriticalChance")
local critDmg = tool:WaitForChild("CriticalDamage")
local handle = tool:WaitForChild("Handle")
local fire = tool:WaitForChild("Fire")
local playerState = tool:WaitForChild("PlayerState")

local enemiesFolder = workspace:WaitForChild("Enemies")
local serverStorage = game:GetService("ServerStorage")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")
local arrowTemplate = serverStorage.Projectiles:WaitForChild("Arrow")

local originalPlayer

local lastShotTime = 0
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)

-- Tracks player-related stats like shots fired, kills, etc.
-- Uses metatable to return 0 as default for any missing key
local PlayerStats = setmetatable({}, {
	__index = function(_, key)
		return 0
	end
})

-- Creates a visible red beam to visualize arrow trajectory in the world
-- Useful for debugging CFrame math and direction calculations
local function drawDebugRay(origin, direction)
	local rayPart = Instance.new("Part")
	rayPart.Anchored = true
	rayPart.CanCollide = false
	rayPart.Size = Vector3.new(0.1, 0.1, direction.Magnitude) -- length matches direction
	rayPart.CFrame = CFrame.new(origin, origin + direction) * CFrame.new(0, 0, -direction.Magnitude / 2)
	rayPart.BrickColor = BrickColor.Red()
	rayPart.Material = Enum.Material.Neon
	rayPart.Transparency = 0.5
	rayPart.Parent = workspace

	-- Automatically removes the ray after 2 seconds
	Debris:AddItem(rayPart, 2)
end

-- function to create xp orbs
function makeOrbs(number, pos)
	for i = 1, number do
		local clone = serverStorage.Orb:Clone() -- clone the orb from the serverstorage
		clone.Parent = workspace.Orbs
		clone.Position = pos
		clone.Size *= (1 + upgrades[15].Increase * upgrades[15].PlayerHas / 100)  -- increase size based on the magnet upgrade (so player can get the orb from further away)
		clone:ApplyImpulse(Vector3.new(math.random(100, 300), 200, math.random(100, 300))) -- random impulse to make orbs move around
	end
end

local orbsTouched = {}

-- function to handle xp orbs collisions
workspace.Orbs.ChildAdded:Connect(function(orb)
	orb.Touched:Connect(function(hit)
		if orbsTouched[orb] or not game.Players:GetPlayerFromCharacter(hit.Parent) then 
			return -- if the orb has been already touched, or the hit parent isnt player's character, then end the function 
		end
		orbsTouched[orb] = true
		orb.Collect.PlaybackSpeed = math.random(80, 120) / 100
		local player = game.Players:GetPlayerFromCharacter(hit.Parent) -- get the player
		if player and player:FindFirstChild("Settings") and player.Settings:FindFirstChild("XP") then
			player.Settings.XP.Value += orb.XP.Value + orb.XP.Value * upgrades[11].PlayerHas * upgrades[11].Increase / 100 -- add the xp to the player's xp
		end
		orb:Destroy() -- destroy the orb
	end)
end)

-- function to create heal gems
function makeHealGems(number, pos)
	for i = 1, number do
		local clone = serverStorage.Health:Clone() -- clone the health gem from the serverstorage
		clone.Parent = workspace.HealGems
		clone.Position = pos
		clone:ApplyImpulse(Vector3.new(math.random(100, 300), 200, math.random(100, 300))) -- random impulse to make orbs move around
	end
end

local healGemsTouched = {}

-- function to handle heal gems collisions
workspace.HealGems.ChildAdded:Connect(function(healGem)
	healGem.Touched:Connect(function(hit)
		if orbsTouched[healGem] or not game.Players:GetPlayerFromCharacter(hit.Parent) then 
			return -- if the health gem has been already touched, or the hit parent isnt player's character, then end the function
		end
		orbsTouched[healGem] = true
		healGem.Collect.PlaybackSpeed = math.random(80, 120) / 100
		local player = game.Players:GetPlayerFromCharacter(hit.Parent)
		if player and player.Character then
			player.Character.Humanoid.Health += healGem.Health.Value + healGem.Health.Value * upgrades[13].PlayerHas * upgrades[13].Increase / 100 -- add the health to the player's health
		end
		healGem:Destroy() -- destroy the health gem
	end)
end)

-- Called when an enemy dies
local function enemyDie(enemy)
	workspace.Settings.Info.Value = "Enemy " .. enemy.Name .. " died!"

	-- Reset info after 1 second
	task.delay(1, function()
		workspace.Settings.Info.Value = ""
	end)

	-- Chance to drop heal gems based on upgrade
	if math.random(1, 30) <= (1 + upgrades[14].Increase * upgrades[14].PlayerHas) then
		makeHealGems(2, enemy.HumanoidRootPart.Position)
	end

	-- Heal the player a bit on enemy death (if upgrade active)
	if originalPlayer and originalPlayer.Character then
		originalPlayer.Character.Humanoid.Health += 
			(upgrades[12].Increase * upgrades[12].PlayerHas) / 100 * 
			originalPlayer.Character.Humanoid.MaxHealth
	end

	-- Create XP orbs at enemy's position
	makeOrbs(enemy.XP.Value, enemy.HumanoidRootPart.Position)

	task.wait(0.5)
	enemy:Destroy()
end

-- Connects enemy death event (only once)
local function setupEnemy(enemy)
	if not enemy:FindFirstChild("Humanoid") then return end
	enemy.Humanoid.Died:Once(function()
		enemyDie(enemy)
	end)
end

-- Set up all existing enemies
for _, enemy in ipairs(enemiesFolder:GetChildren()) do
	setupEnemy(enemy)
end

-- Set up any new enemy added later
enemiesFolder.ChildAdded:Connect(setupEnemy)

-- Function to find the closest enemy within range
local function findClosestEnemy(player)
	local closestEnemy = nil 
	local shortestDistance = range.Value + 1 + range.Value * (upgrades[6].Increase * upgrades[6].PlayerHas)/100 -- gets the shortest possible distance to find an enemy


	for _, enemy in pairs(enemiesFolder:GetChildren()) do -- goes through every enemy in the Enemies folder
		if not enemy:FindFirstChild("HumanoidRootPart") then
			return
		end
		local humanoid = enemy:FindFirstChild("Humanoid")

		if not humanoid or humanoid.Health <= 0 then-- checks, if there's a humanoid and if its alive
			return
		end
		
		local enemyPosition = enemy.HumanoidRootPart.Position -- gets the Vector3 position of the enemy
		local distance = (enemyPosition - handle.Position).Magnitude

		if distance < shortestDistance then -- checks, if the distance to the enemy is smaller than distance to the closest enemy yet
			closestEnemy = enemy -- sets closest enemy to the (new) enemy with the shortest distance
			shortestDistance = distance -- sets the shortest distance to the distance of the (new) closest enemy
		end
	end

	return closestEnemy -- returns back with the closest enemy, if found
end


-- Function to calculate the direction and distance to the target
local function calculateTrajectory(arrowPosition, targetPosition)
	local direction = (targetPosition - arrowPosition).Unit -- calculate the direction
	local distance = (targetPosition - arrowPosition).Magnitude
	local travelTime = distance / projectileSpeed.Value / 5
	local trueDistance = distance / travelTime * 5 -- the actual distance
	local newTargetPosition = arrowPosition + (direction * trueDistance)
	return direction, newTargetPosition
end

-- Function to create and configure the arrow
local function createArrow(doNoclip)
	local arrow = arrowTemplate:Clone() -- clone the arrow and put it in workspace
	arrow.CFrame = handle.CFrame
	arrow.Parent = workspace

	if doNoclip == true then
		arrow.Highlight.OutlineColor = Color3.new(0.466667, 0.854902, 0.054902) -- turn to lime green color if arrow can noclip through
	end

	return arrow -- return with the created arrow
end

-- Function to handle the arrow's movement
local function moveArrow(arrow, newTargetPosition)
	local tweenInfo = TweenInfo.new(5, Enum.EasingStyle.Linear) -- set the TweenInfo
	local arrowTween = TweenService:Create(arrow, tweenInfo, {Position = newTargetPosition})
	arrowTween:Play() -- play the movement tween
end



-- Function to handle collision detection and damage application
local function handleCollision(arrow, targetEnemy, player, doNoclip)
	local hittedHumans = {} -- a table so if arrow can noclip through enemies, they won't be hitted twice
	local traveledDistance = 0

	if not targetEnemy or not targetEnemy:FindFirstChild("HumanoidRootPart") then
		return 
	end

	local connection
	connection = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
		traveledDistance = traveledDistance + (projectileSpeed.Value * deltaTime)

		-- it has to be in the same line, since i couldn't denest this condition, since sometimes the script would break here
		if targetEnemy:FindFirstChild("HumanoidRootPart") then local raycastResult = workspace:Raycast(arrow.Position, (targetEnemy.HumanoidRootPart.Position - arrow.Position).Unit * 2)
			if not raycastResult then
				return
			end

			local hitPart = raycastResult.Instance
			local hitParent = hitPart.Parent
			local humanoid = hitParent:FindFirstChild("Humanoid")

			if hitParent == workspace.Map.Walls and not doNoclip then
				arrow:Destroy()
				connection:Disconnect() -- if arrow cannot noclip and hits a wall, then destroy the arrow and disconnect the connection
			end

			if not humanoid or humanoid.Health <= 0 or hitParent == player.Character or table.find(hittedHumans, humanoid) then
				return -- if there's no humanoid in the enemy, or if it's dead, or if hitted character is the player's character or if the enemy is already in the hittedHumans table, then end the function
			end

			table.insert(hittedHumans, humanoid) -- insert the humanoid to the table, so it wont get damaged twice

			-- calculate the damage
			local rageBonus = 1
			if player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth <= 0.30 then
				rageBonus = 1 + (upgrades[17].Increase * upgrades[17].PlayerHas) / 100 -- apply the rage bonus
			end

			local dmg = damage.Value * rageBonus
			if math.random(1, 100) <= critChance.Value then
				dmg = dmg * (critDmg.Value / 100)
			end

			-- finally, deal the boosted (or not) damage to humanoid
			humanoid:TakeDamage(dmg)

			if not doNoclip then
				arrow:Destroy()
				connection:Disconnect()
			end
		end
	end)
end

-- function to handle the arrows
local function fireArrows(targetEnemy, player, doNoclip, arrowCount)
	if not targetEnemy or not targetEnemy:FindFirstChild("HumanoidRootPart") then
		return -- if theres no target enemy, or it doesn't have HumanoidRootPart, then end the function
	end

	fire.PlaybackSpeed = math.random(80, 110) / 100 -- random playback for the fire sound, to make it more unique and not that repetitive
	fire:Play()

	local targetPosition = targetEnemy.HumanoidRootPart.Position
	local baseDirection = (targetPosition - handle.Position).Unit
	local horizontalSpread = 0.08 -- the horizontal spread of the arrows

	local startOffset = -(arrowCount - 1) / 2 -- arrow offset

	for i = 0, arrowCount - 1 do
		local offset = startOffset + i
		local spreadDirection = (baseDirection + Vector3.new(offset * horizontalSpread, 0, 0)).Unit

		local arrow = createArrow(doNoclip) -- create an arrow by firing the createArrow function

		local distance = (targetPosition - arrow.Position).Magnitude -- calculate the distance between the arrow and the target
		local travelTime = distance / projectileSpeed.Value / 5
		local trueDistance = distance / travelTime * 5

		local newTargetPosition = arrow.Position + (spreadDirection * trueDistance) -- calculate the new target position based on the spread direction and distance

		drawDebugRay(arrow.Position, newTargetPosition - arrow.Position)

		arrow.CFrame = CFrame.new(arrow.Position, newTargetPosition) -- set the arrow's position and orientation to the new target

		moveArrow(arrow, newTargetPosition) -- fire the arrow to the new target
		handleCollision(arrow, targetEnemy, player, doNoclip) -- handle arrow's collision
	end
end

-- main function
local function shoot(player)
	local closestEnemy = findClosestEnemy(player) -- firing the function to find the closest enemy
	if not closestEnemy then
		return -- if there's no enemy found, stop the function
	end
	
	local doNoclip = false -- noclip set to false by default

	if upgrades[16].PlayerHas > 0 and math.random(1,100) <= upgrades[16].PlayerHas * upgrades[16].Increase then
		doNoclip = true -- if player has the projectile collision upgrade, there's a chance for the arrow to pass through things, and even hit multiple enemies at once!
	end

	local projectileNumber = projectiles.Value + upgrades[7].PlayerHas -- get number of projectiles that will be launched
	fireArrows(closestEnemy, player, doNoclip, projectileNumber) -- firing a function to fire arrows
end

-- Main loop
while task.wait(fireRate.Value * (1 + (upgrades[2].Increase * upgrades[2].PlayerHas) / 100)) do
	local player = game.Players:GetPlayerFromCharacter(tool.Parent) -- get player
	if not originalPlayer then originalPlayer = player end

	if player then
		shoot(player) -- if there's the player, start the main function
	end

end
